void printPathsUtil(TreeNode* curr_node, 
int sum, int sum_so_far, vector<int> &path,vector<vector<int>> &ans)
{
    if (curr_node == NULL)
        return;
 
    sum_so_far += curr_node->val;
    path.push_back(curr_node->val);
    if (sum_so_far == sum && curr_node->left == NULL && curr_node->right == NULL)
    {
       ans.push_back(path);
    }

    if (curr_node->left != NULL)
        printPathsUtil(curr_node->left, sum, sum_so_far, path, ans);
 
    if (curr_node->right != NULL)
        printPathsUtil(curr_node->right, sum, sum_so_far, path, ans);
 
    path.pop_back();
}
vector<vector<int>> Solution::pathSum( TreeNode* A, int B) {
    vector<int> check;
    vector<vector<int> > ans;
    printPathsUtil(A,B,0,check,ans);
    return ans;
}
